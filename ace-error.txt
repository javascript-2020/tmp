


/*

i seemed to get this error when i was in the middle of 
typing out a button element

<button>test</button>

*/


mode-html.js:1 Uncaught TypeError: Cannot read properties of undefined (reading 'type')
    at a (mode-html.js:1:20942)
    at t.FoldMode._findEndTagInLine (mode-html.js:1:22528)
    at t.FoldMode.getFoldWidget (mode-html.js:1:21590)
    at t.FoldMode.getFoldWidget (mode-html.js:1:51836)
    at e.$renderCell (ace.js:1:312290)
    at e.update (ace.js:1:308834)
    at e.$renderChanges (ace.js:1:402170)
    at _flush (ace.js:1:349813)
a	@	mode-html.js:1
_findEndTagInLine	@	mode-html.js:1
getFoldWidget	@	mode-html.js:1
getFoldWidget	@	mode-html.js:1
e.$renderCell	@	ace.js:1
e.update	@	ace.js:1
e.$renderChanges	@	ace.js:1
_flush	@	ace.js:1
requestAnimationFrame		
e.schedule	@	ace.js:1
e.updateLines	@	ace.js:1
e.onDocumentChange	@	ace.js:1
r._signal	@	ace.js:1
e.onChange	@	ace.js:1
r._signal	@	ace.js:1
e.applyDelta	@	ace.js:1
e.insertMergedLines	@	ace.js:1
e.insert	@	ace.js:1
e.insert	@	ace.js:1
e.insert	@	ace.js:1
exec	@	ace.js:1
(anonymous)	@	ace.js:1
r._emit.r._dispatchEvent	@	ace.js:1
t.exec	@	ace.js:1
e.$callKeyboardHandlers	@	ace.js:1
e.onTextInput	@	ace.js:1
e.onTextInput	@	ace.js:1
q	@	ace.js:1
R	@	ace.js:1











ace.define("ace/mode/folding/xml", ["require", "exports", "module", "ace/lib/oop", "ace/range", "ace/mode/folding/fold_mode"], function(e, t, n) {
    "use strict";
    function a(e, t) {
        return e.type.lastIndexOf(t + ".xml") > -1    // <- error at this line
    }
    var r = e("../../lib/oop")
      , i = e("../../range").Range
      , s = e("./fold_mode").FoldMode
      , o = t.FoldMode = function(e, t) {
        s.call(this),
        this.voidElements = e || {},
        this.optionalEndTags = r.mixin({}, this.voidElements),
        t && r.mixin(this.optionalEndTags, t)
    }
    ;
    r.inherits(o, s);
    var u = function() {
        this.tagName = "",
        this.closing = !1,
        this.selfClosing = !1,
        this.start = {
            row: 0,
            column: 0
        },
        this.end = {
            row: 0,
            column: 0
        }
    };
    (function() {
        this.getFoldWidget = function(e, t, n) {
            var r = this._getFirstTagInLine(e, n);
            return r ? r.closing || !r.tagName && r.selfClosing ? t === "markbeginend" ? "end" : "" : !r.tagName || r.selfClosing || this.voidElements.hasOwnProperty(r.tagName.toLowerCase()) ? "" : this._findEndTagInLine(e, n, r.tagName, r.end.column) ? "" : "start" : this.getCommentFoldWidget(e, n)
        }
        ,
        this.getCommentFoldWidget = function(e, t) {
            return /comment/.test(e.getState(t)) && /<!-/.test(e.getLine(t)) ? "start" : ""
        }
        ,
        this._getFirstTagInLine = function(e, t) {
            var n = e.getTokens(t)
              , r = new u;
            for (var i = 0; i < n.length; i++) {
                var s = n[i];
                if (a(s, "tag-open")) {
                    r.end.column = r.start.column + s.value.length,
                    r.closing = a(s, "end-tag-open"),
                    s = n[++i];
                    if (!s)
                        return null;
                    r.tagName = s.value;
                    if (s.value === "") {
                        s = n[++i];
                        if (!s)
                            return null;
                        r.tagName = s.value
                    }
                    r.end.column += s.value.length;
                    for (i++; i < n.length; i++) {
                        s = n[i],
                        r.end.column += s.value.length;
                        if (a(s, "tag-close")) {
                            r.selfClosing = s.value == "/>";
                            break
                        }
                    }
                    return r
                }
                if (a(s, "tag-close"))
                    return r.selfClosing = s.value == "/>",
                    r;
                r.start.column += s.value.length
            }
            return null
        }
        ,
        this._findEndTagInLine = function(e, t, n, r) {
            var i = e.getTokens(t)
              , s = 0;
            for (var o = 0; o < i.length; o++) {
                var u = i[o];
                s += u.value.length;
                if (s < r - 1)
                    continue;
                if (a(u, "end-tag-open")) {
                    u = i[o + 1],
                    a(u, "tag-name") && u.value === "" && (u = i[o + 2]);
                    if (u && u.value == n)
                        return !0
                }
            }
            return !1
        }
        ,
        this.getFoldWidgetRange = function(e, t, n) {
            var r = this._getFirstTagInLine(e, n);
            if (!r)
                return this.getCommentFoldWidget(e, n) && e.getCommentFoldRange(n, e.getLine(n).length);
            var s = e.getMatchingTags({
                row: n,
                column: 0
            });
            if (s)
                return new i(s.openTag.end.row,s.openTag.end.column,s.closeTag.start.row,s.closeTag.start.column)
        }
    }
    ).call(o.prototype)
}),


